dat_filt[["long"]]<- merge(dat_filt$long, model.matrix, by="Sample", all=T)
libSizes <- aggregate(data=dat_filt$long, value~Sample,FUN=sum)
names(libSizes)[2] <- "libsize"
dat_filt$long <- merge(dat_filt$long, libSizes, by="Sample", all=T)
dat_filt$long$cpm <- dat_filt$long$value*1000000/dat_filt$long$libsize
dat_filt$long$logcpm <- log(dat_filt$long$cpm+0.00001)
return(dat_filt)
}
dat_filt <- read.data("~/Documents/Rdata/EDA/Data/counts.csv","~/Documents/Rdata/EDA/Data/expt_design.csv")
str(dat_filt)
geneLevelData <- dat_filt$wide
View(geneLevelData)
mat <- as.matrix(geneLevelData)
library(EDASeq)
data <- newSeqExpressionSet(mat)
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(mat)),
row.names=colnames(geneLevelData))))
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(mat))))
)
data <- newSeqExpressionSet(mat,phenoData=AnnotatedDataFrame(data.frame(conditions=factor(colnames(mat)))))
data <- newSeqExpressionSet(mat)
newSeqExpressionSet()
newSeqExpressionSet
colnames(mat)
View(mat)
rownames(mat) = mat[,1]
newmat <- mat[,-1]
View(newmat)
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))))
data <- newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData))))
data <- newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(newmat))))
library(yeastRNASeq)
data(geneLevelData)
View(geneLevelData)
mat <- as.matrix(geneLevelData)
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))))
plotPCA(data, col=rep(1:2, each=2))
plotPCA
EDASeq::plotPCA
showMethods("plotPCA")
BioGenerics::plotPCA
BiocGenerics::plotPCA
head(data)
data(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat)))
)
View(newmat)
data(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat))))
data(newmat)
data<-newSeqExpressionSet(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat))))
View(newmat)
data
data<-newSeqExpressionSet(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat)),row.names=colnames(geneLevelData)))
data<-newSeqExpressionSet(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat)),row.names=colnames(newmat)))
data<-newSeqExpressionSet(newmat,phenoData=AnnotatedDataFrame(data.frame(conditions=colnames(newmat),row.names=colnames(newmat))))
AnnotatedDataFrame()
AnnotatedDataFrame
data(geneLevelData)
mat <- as.matrix(geneLevelData)
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))))
data
mat
colnames(genenLevelData)
colnames(geneLevelData)
factor(c("mut", "mut", "wt", "wt")
)
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData)))
phenoData
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
+                row.names=colnames(geneLevelData))
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),row.names=colnames(geneLevelData))
mat
View(geneLevelData)
geneLevelData1<-dat_filt
View(geneLevelData)
geneLevelData1<-dat_filt$wide
View(geneLevelData1)
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1[,-1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
View(newmat)
plotPCA <- function(dat_filt){
geneLevelData <- dat_filt$wide
newmat <- as.matrix(geneLevelData)
data <- newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
plotPCA(data)
}
plotPCA <- function(dat_filt){
geneLevelData <- dat_filt$wide
newmat <- as.matrix(geneLevelData)
data <- EDAseq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDAseq::plotPCA(data)
}
plotPCA(dat_filt)
plotPCA <- function(dat_filt){
geneLevelData <- dat_filt$wide
newmat <- as.matrix(geneLevelData)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDASeq::plotPCA(data)
}
plotPCA(dat_filt)
plotPCA <- function(dat_filt){
geneLevelData <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDASeq::plotPCA(data)
}
plotPCA(dat_filt)
geneLevelData <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
View(geneLevelData1)
geneLevelData <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
PCA <- function(dat_filt){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDASeq::plotPCA(data)
}
PCA(dat_filt)
dat_filt <- read.data("~/Documents/Rdata/EDA/Data/counts.csv","~/Documents/Rdata/EDA/Data/expt_design.csv")
read.data <- function(path,designpath){
dat <- read.csv(path, header=T)
rows_to_keep= apply(dat[,-c(1)],1,FUN=function(x)
{
y <- 0;
if (all(x > 0 )) y <-1;
return(y)
}
)
dat_filt <- list()
dat_filt[["wide"]]<- dat[as.logical(rows_to_keep > 0),]
dat_filt[["long"]]<- reshape2::melt(dat_filt$wide, id="gene", variable.name="Sample")
model.matrix <- read.csv(designpath, header=T)
dat_filt[["long"]]<- merge(dat_filt$long, model.matrix, by="Sample", all=T)
libSizes <- aggregate(data=dat_filt$long, value~Sample,FUN=sum)
names(libSizes)[2] <- "libsize"
dat_filt$long <- merge(dat_filt$long, libSizes, by="Sample", all=T)
dat_filt$long$cpm <- dat_filt$long$value*1000000/dat_filt$long$libsize
dat_filt$long$logcpm <- log(dat_filt$long$cpm+0.00001)
return(dat_filt)
}
dat_filt <- read.data("~/Documents/Rdata/EDA/Data/counts.csv","~/Documents/Rdata/EDA/Data/expt_design.csv")
PCA(dat_filt)
PCA <- function(dat_filt){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDASeq::plotPCA(data,labels=FALSE)
}
PCA(dat_filt)
PCA <- function(dat_filt){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
EDASeq::plotPCA(data)
}
PCA(dat_filt)
EDASeq::plotPCA(data,col=(1:2,each=2))
EDASeq::plotPCA(data,col=(1:2,each=2))
EDASeq::plotPCA(data,col=rep(1:2,each=2))
plotPCA(data,col=rep(1:2,each=2))
EDASeq::plotPCA(data,col=rep(1:2,each=2))
plotPCA(data, col=rep(1:2, each=2))
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(colnames(newmat)),
row.names=colnames(geneLevelData1))))
plotPCA(data, col=rep(1:2, each=2))
plotPCA(data, col=rep(1:2, each=2),lables=FALSE)
plotPCA(data, col=rep(1:2, each=2),labels=FALSE)
plotPCA(data, col=rep(1:2, each=2),K=2,labels=FALSE)
plotPCA(data, col=rep(1:2, each=2),k=2,labels=FALSE)
warnings()
legend("topright", inset=c(-0.2,0), legend=c("A","B"), pch=c(1,3), title="Group")
plotPCA(data, col=rep(1:2, each=2),k=2,labels=FALSE)
legend("topright", inset=c(-0.2,0), legend=c("A","B"), pch=c(1,3), title="Group")
plotPCA
showMethods("plotPCA")
install.packages("BiocGenerics")
install.packages("BiocGenerics")
install.packages("BiocGenerics")
install.packages("BiocGenerics")
library(BiocGenerics)
showMethods("plotPCA")
plotPCA
install.packages("affycoretools")
dat_filt
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
gene.pca <- prcomp(geneLevelData1)
print(gene.pca)
plot(gene.pca$PC1,gene.pca$PCA2)
gene.pca$PC1
str(gene.pca)
str(gene.pca$rotation)
gene.pca$rotation
pca.rot <- gene.pca$rotation
pca.rot[,1]
plot(pca.rot[,1],pca.rot[,2])
plot(gene.pca$x[,1:2],col=colnames(pca.rot))
plot(gene.pca$x[,1:2],col=rownames(pca.rot))
plot(gene.pca$x[,1:2],col=factor(rownames(pca.rot)))
plot(gene.pca$rotation[,1:2],col=factor(rownames(pca.rot)))
install.packages("ggfortify")
library(ggfortify)
autoplot(gene.pca)
gene.pca
PCA(dat_filt)
data(iris)
df <- iris[c(1,2,3,4)]
View(df)
autoplot(prcomp(df), data = iris, colour = 'Species')
View(iris)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(gplots)
library(RSQLite)
library(dendextend)
library(ascii)
source('generalfunctions.R', echo=TRUE)
getwd()
source('R/generalfunctions.R', echo=TRUE)
dat <- read.csv("Data/counts.csv", header=T)
rows_to_keep= apply(dat[,-c(1)],1,FUN=function(x)
{
y <- 0;
if (all(x > 0 )) y <-1;
return(y)
}
)
dat_filt <- list()
dat_filt[["wide"]]<- dat[as.logical(rows_to_keep > 0),]
dat_filt[["long"]]<- melt(dat_filt$wide, id="gene", variable.name="Sample")
print (dim(dat)[1], dim(dat_filt)[1])
model.matrix <- read.csv("Data/expt_design.csv", header=T)
dat_filt[["long"]]<- merge(dat_filt$long, model.matrix, by="Sample", all=T)
libSizes <- aggregate(data=dat_filt$long, value~Sample,FUN=sum)
names(libSizes)[2] <- "libsize"
dat_filt$long <- merge(dat_filt$long, libSizes, by="Sample", all=T)
dat_filt$long$cpm <- dat_filt$long$value*1000000/dat_filt$long$libsize
ensembl = useMart("ensembl",dataset="celegans_gene_ensembl")
library(biomaRt)
ensembl = useMart("ensembl",dataset="celegans_gene_ensembl")
filters = listFilters(ensembl)
attrs.to.get = listAttributes(ensembl)
attrs.to.get
attrs.to.get[c(58,15,6:9,20,21,5),1]
common_ids = getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=rownames(dat_filt$wide), mart = ensembl)
head(common_ids)
head(rownames(dat_filt$wide)
)
head(names(dat_filt$wide))
common_ids = getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=dat_filt$wide$gene, mart = ensembl)
annoDat <- getBM(attributes=c("ensembl_gene_id",attrs.to.get[c(15,6:9,20,21,5),1]),filters = 'ensembl_gene_id',values =common_ids, mart = ensembl)
View(annoDat)
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
head(annoDat)
row.names(annoDa) <- annoDat$ensembl_gene_id
row.names(annoDat) <- annoDat$ensembl_gene_id
model.matrix
model.mat <- read.csv("Data/expt_design.csv", header=T)
row.names(model.mat) <- model.mat$Sample
data <- EDASeq::newSeqExpressionSet(newmat,
featureData = annoDat[,-1],
phenoData=model.mat[,-1])
dim(dat_filt$wide)
dim(annoDat)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=model.mat[,-1])
model.mat
data
?useMart
?listFilters
annot_data <- function(dat_filt){
ensembl = biomaRt::useMart("ensembl",dataset="celegans_gene_ensembl")
filters = biomaRt::listFilters(ensembl)
attrs.to.get = listAttributes(ensembl)
common_ids = getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=dat_filt$wide$gene, mart = ensembl)
annoDat <- getBM(attributes=c("ensembl_gene_id",attrs.to.get[c(15,6:9,20,21,5),1]),filters = 'ensembl_gene_id',values =common_ids, mart = ensembl)
row.names(annoDat) <- annoDat$ensembl_gene_id
return(annoDat)
}
annoDat<-annot_data(dat_filt)
View(annoDat)
g_1 <- ggplot(annoDat, aes(x=gene_biotype))+geom_bar(stat="count")
g_1<- ggplotly(g_1)
library(ggplotly)
?ggplotly
g_1
plotPCA(dat_filt$wide)
require(EDASeq)
plotPCA(countMatrix)
EDAseq::newSeqExpressionSet(newmat,phenoData=annoDat)
library(EDASeq)
EDASeq::newSeqExpressionSet(newmat,phenoData=annoDat)
annot_data <- function(dat_filt){
ensembl = biomaRt::useMart("ensembl",dataset="celegans_gene_ensembl")
filters = biomaRt::listFilters(ensembl)
attrs.to.get = listAttributes(ensembl)
common_ids = getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=dat_filt$wide$gene, mart = ensembl)
annoDat <- getBM(attributes=c("ensembl_gene_id",attrs.to.get[c(15,6:9,20,21,5),1]),filters = 'ensembl_gene_id',values =common_ids, mart = ensembl)
row.names(annoDat) <- annoDat$ensembl_gene_id
return(annoDat)
}
annoDat <- annot_data(dat_filt)
annot_data <- function(dat_filt){
ensembl = biomaRt::useMart("ensembl",dataset="celegans_gene_ensembl")
filters = biomaRt::listFilters(ensembl)
attrs.to.get = biomaRt::listAttributes(ensembl)
common_ids = biomaRt::getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=dat_filt$wide$gene, mart = ensembl)
annoDat <- biomaRt::getBM(attributes=c("ensembl_gene_id",attrs.to.get[c(15,6:9,20,21,5),1]),filters = 'ensembl_gene_id',values =common_ids, mart = ensembl)
row.names(annoDat) <- annoDat$ensembl_gene_id
return(annoDat)
}
annoDat <- annot_data(dat_filt)
EDASeq::newSeqExpressionSet(newmat,phenoData=annoDat)
View(annoDat)
View(newmat)
View(annoDat)
View(newmat)
View(annoDat)
ensembl = biomaRt::useMart("ensembl",dataset="celegans_gene_ensembl")
filters = biomaRt::listFilters(ensembl)
attrs.to.get = biomaRt::listAttributes(ensembl)
common_ids = biomaRt::getBM(attributes="ensembl_gene_id", filters='wormbase_gene',value=dat_filt$wide$gene, mart = ensembl)
common_ids
View(common_ids)
annoDat <- biomaRt::getBM(attributes=c("ensembl_gene_id",attrs.to.get[c(15,6:9,20,21,5),1]),filters = 'ensembl_gene_id',values =common_ids, mart = ensembl)
annoDat
dim(dat_filt$wide)
head(dat_filt$wide)
View(annot_data)
View(annoDat)
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=model.mat[,-1])
library(yeastRNASeq)
data(geneLevelData)
mat <- as.matrix(geneLevelData)
data <- newSeqExpressionSet(mat,
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))))
plotPCA(data, col=rep(1:2, each=2))
phenoData=AnnotatedDataFrame(
data.frame(conditions=factor(c("mut", "mut", "wt", "wt"))
)
)
phenoData
data.frame(conditions=factor(c("mut", "mut", "wt", "wt"))
)
colnames(geneLevelData)
data.frame(conditions=factor(c("mut", "mut", "wt", "wt")),
row.names=colnames(geneLevelData))
View(annoDat)
View(geneLevelData)
View(geneLevelData1)
design matrix
model.matrix <- read.csv(designpath, header=T)
model.matrix <- read.csv("Data/expt_design.csv", header=T)
View(model.matrix)
AnnotatedDataFrame(model.matrix[,1:2])
AnnotatedDataFrame(model.matrix[,1:2],rownames=colnames(geneLevelData1))
AnnotatedDataFrame(data.frame(model.matrix[,1:2],rownames=colnames(geneLevelData1)))
rownames=colnames(geneLevelData1)
rownames
model.matrix[,1:2]
AnnotatedDataFrame(data.frame(model.matrix[,1:2],rownames=colnames(geneLevelData1)))
AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
modelannot <- AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=model.annot)
modelannot <- AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=modelannot)
EDASeq::plotPCA(data,col=rep(1:2, each=2),labels=FALSE)
EDASeq::plotPCA(data,col=rep(1:2, each=2))
EDASeq::plotPCA(data,col=rep(1:4, each=4))
EDASeq::plotPCA(data,col=rep(1:4, each=3))
EDASeq::plotPCA(data,labels=FALSE)
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub]))
data(yeastGC)
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub]))
sub <- intersect(rownames(geneLevelData), names(yeastGC))
featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub]))
data.frame(gc=yeastGC[sub])
testa <- data.frame(gc=yeastGC[sub])
View(testa)
modelannot
data.frame(model.matrix[,2],row.names=colnames(geneLevelData1))
library(yeastRNASeq)
data(geneLevelData)
data(yeastGC)
sub <- intersect(rownames(geneLevelData), names(yeastGC))
sub
modelannot
data.frame(model.matrix[,2],row.names=colnames(geneLevelData1))
EDASeq::plotPCA(data,col=rep(1:4, each=3),labels=FALSE)
EDASeq::plotPCA(data,labels=FALSE)
EDASeq::plotPCA(data,col=rep(1:4, each=3),labels=FALSE)
PCA(dat_filt)
PCA <- function(dat_filt){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
model.matrix <- read.csv(designpath, header=T)
modelannot <- AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=modelannot)
EDASeq::plotPCA(data,col=rep(1:4, each=3),labels=FALSE,main="PCA plot of sample gene")
}
PCA(dat_filt)
PCA(dat_filt)
PCA <- function(dat_filt,designpath){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
model.matrix <- read.csv(designpath, header=T)
modelannot <- AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=modelannot)
EDASeq::plotPCA(data,col=rep(1:4, each=3),labels=FALSE,main="PCA plot of sample gene")
}
PCA(dat_filt,"Data/expt_design.csv")
PCA(dat_filt,"Data/expt_design.csv")
PCA <- function(dat_filt,designpath){
geneLevelData1 <- dat_filt$wide
rownames(geneLevelData1) = geneLevelData1[,1]
geneLevelData1<-geneLevelData1[,-1]
newmat <- as.matrix(geneLevelData1)
model.matrix <- read.csv(designpath, header=T)
modelannot <- AnnotatedDataFrame(data.frame(model.matrix[,2],row.names=colnames(geneLevelData1)))
data <- EDASeq::newSeqExpressionSet(newmat,
phenoData=modelannot)
EDASeq::plotPCA(data,col=rep(1:4, each=3),labels=TRUE,main="PCA plot of sample gene")
}
PCA(dat_filt,"Data/expt_design.csv")
data(iris)
head(iris, 3)
View(iris)
dim(dat_filt$wide)
dim(dat_filt$wide)
data("Titanic")
titannic
Titanic
View(annoDat)
library(yeastRNASeq)
View(annot_data)
